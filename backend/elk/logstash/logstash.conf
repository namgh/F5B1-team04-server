input {
    jdbc {
        jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://my_database:3306/cu2project"
        jdbc_user => "root"
        jdbc_password => "root"
        schedule => "* * * * *"
        use_column_value => true
        tracking_column => "updatedat"
        last_run_metadata_path => "./aaa.txt"
        tracking_column_type => "numeric"
        statement => "SELECT bg.id, bg.title, bg.like, bg.contents,ur.email, ur.nickname , bgctg.tag ,bg.updatedat, unix_timestamp(bg.updatedat) as updatedat from blog as bg
        left join blog_blogcategorytag_blog_category_tag as bgjoin ON bgjoin.blogId  = bg.id
        LEFT JOIN blog_category_tag as bgctg ON  bgctg.id = bgjoin.blogCategoryTagId 
        LEFT JOIN user as ur ON  ur.id = bg.userId
        where unix_timestamp(bg.updatedat) > :sql_last_value order by updatedat asc"
        type => "blog"
    } 
        jdbc {
        jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://my_database:3306/cu2project"
        jdbc_user => "root"
        jdbc_password => "root"
        schedule => "* * * * *"
        use_column_value => true
        tracking_column => "updatedat"
        last_run_metadata_path => "./aaa.txt"
        tracking_column_type => "numeric"
        statement => "SELECT sk.id, sk.title, sk.like, sk.contents, ur.email, ur.nickname , sktag.tag ,sk.updatedat, unix_timestamp(sk.updatedat) as updatedat from stack as sk
        left join stack_stacktag_stack_tag as skjoin ON skjoin.stackId  = sk.id
        LEFT JOIN stack_tag as sktag ON  sktag.id = skjoin.stackTagId 
        LEFT JOIN user as ur ON  ur.id = sk.userId
        where unix_timestamp(sk.updatedat) > :sql_last_value order by updatedat asc"
        type => "stack"
    }
        jdbc {
        jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://my_database:3306/cu2project"
        jdbc_user => "root"
        jdbc_password => "root"
        schedule => "* * * * *"
        use_column_value => true
        tracking_column => "updatedat"
        last_run_metadata_path => "./aaa.txt"
        tracking_column_type => "numeric"
        statement => "SELECT cl.id, cl.title, cl.contents,ur.email, ur.nickname, cl.updatedat, unix_timestamp(cl.updatedat) as updatedat from coach_column as cl
        LEFT JOIN user as ur ON  ur.id = cl.userId
        where unix_timestamp(cl.updatedat) > :sql_last_value order by updatedat asc"
        type => "column"
    }
}

filter {

    if [type] == "blog"{
        mutate {
            add_field => {
                "status" => "blog"
            }
        }
    }  else if [type] == "column"{
        mutate {
            add_field => {
                "status" => "column"
            }
        }
    } else if [type] == "stack"{
        mutate {
            add_field => {
                "status" => "stack"
            }
        }
    }
    mutate { 
        copy => {
            "contents" => "searchcontents"
        }
    }
    mutate { 
        gsub => [  
            "searchcontents","!\[\]+[(]+[0-9a-zA-Z:/]+[)]","",
            "searchcontents"," {3,}","  ",
            "searchcontents","\`","",
            "searchcontents","\#{2,}","",
            "searchcontents","/n","",
            "searchcontents","http[0-9a-zA-Z:/.!?<>()]+[ ]",""
        ]
    }
}

output {
    if [type] == "blog" {
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "blog"
            document_id => "%{id}"
            manage_template => true 
            template_name => "cu"
            template => "/_templates/cu/template.json"
            template_overwrite => true
        }
            stdout { codec => rubydebug }
    }
}